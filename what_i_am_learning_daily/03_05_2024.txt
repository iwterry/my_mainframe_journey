date: March 5, 2024

I watched the second half of lecture 7 ("COBOL Variable Declaration") and the first half of lecture 8 ("Accept-Display Statement") of the first course.

The following are some things I learned from the second half of lecture 7:
	- Two important COBOL variable data types are numeric and alpha-numeric.
	- While elementary variables have data types, group variables do not have data types. 
	- The syntax for the numeric variables is the following:
	  LEVEL-NUMBER VARIABLE-NAME PIC 9(NUM-OF-DIGITS).
		
		- The following is an example of an unsigned numeric variable with a memory space allocation of 3 bytes that is capable of holding only non-negative integers:
		  01 NUMERIC-VAR-1 PIC 9(03).
		  	- NOTE: The "9" indicates that the variable is a numeric variable.
		- The following is an example of a signed numeric variable with a memory space allocation of 3 bytes that is capable of holding only integers:
		  01 NUMERIC-VAR-2 PIC S9(03).
		  	- NOTES:
				- The "9" indicates that the variable is a numeric variable.
				- The "S" indicates that the numeric variable is a signed numeric variable.
		- The following is an example of a signed numeric variable with a memory space allocation of 3 bytes for before the decimal point and 2 bytes for after the decimal point:
		  01 NUMERIC-VAR-3 PIC S9(03)V9(02).
			- NOTES:
				- The "9" indicates that the variable is a numeric variable.
				- The "S" indicates that the numeric variable is a signed numeric variable.
				- The "V" indicates that there is a decimal point and where that decimal point is. This variable holds values with three digits before the decimal point and two digits after the decimal point (e.g., 123.45).
	- The syntax for the alpha-numeric variables is the following:
	  LEVEL-NUMBER VARIABLE-NAME PIC X(NUM-OF-CHARACTERS).
		
		- The following is an example of an alpha-numeric variable with a memory space allocation of 5 bytes:
		  01 ALPHA-NUM-VAR-1 PIC X(05).
		  	- NOTE: The "X" indicates that the variable is an alpha-numeric variable.
	- A variable should only be of the numeric data type when mathematical operations are performed on the variable; otherwise, you should use the alpha-numeric data type.


The following are some things I learned from the first half of lecture 8:
	- Elementary variables can be initialized with a value when being declared by using the VALUE keyword:
		- The following are examples:
		  01 NUMERIC-VAR-4 PIC 9(03) VALUE 123.
		  01 NUMERIC-VAR-5 PIC 9(03) VALUE ZERO.
		  01 ALPHA-NUM-VAR-2 PIC X(05) VALUE 'HELLO'.
		  01 ALPHA-NUM-VAR-3 PIC X(05) VALUE SPACE.
			- NOTES:
				- The value 123 is called a numeric constant.
				- The value 'Hello' is called an alpha-numeric constant. All alpha-numeric constants are enclosed in single quotation marks.
				- The ZERO and SPACE are called figurative constants.
	- Some places data can come from (or go to) are files, database tables, and CICS screens. There are different statements used to receive data from (or send data to) places:
		- The DISPLAY statement is used to send data from a COBOL program variable to a spool, where the data will be stored temporarily.
		- The ACCEPT statement is used to read from a JCL statement (specifically, from a SYSIN DD statement) and send to a COBOL program variable.


